diff --git a/arch/arm/kernel/calls.S b/arch/arm/kernel/calls.S
index 463ff4a..54a41fb 100644
--- a/arch/arm/kernel/calls.S
+++ b/arch/arm/kernel/calls.S
@@ -387,6 +387,7 @@
 /* 375 */	CALL(sys_setns)
 		CALL(sys_process_vm_readv)
 		CALL(sys_process_vm_writev)
+		CALL(sys_ext4_cowcopy)
 #ifndef syscalls_counted
 .equ syscalls_padding, ((NR_syscalls + 3) & ~3) - NR_syscalls
 #define syscalls_counted
diff --git a/fs/ext4/Makefile b/fs/ext4/Makefile
index 56fd8f86..4d6c5e1 100644
--- a/fs/ext4/Makefile
+++ b/fs/ext4/Makefile
@@ -7,7 +7,7 @@ obj-$(CONFIG_EXT4_FS) += ext4.o
 ext4-y	:= balloc.o bitmap.o dir.o file.o fsync.o ialloc.o inode.o page-io.o \
 		ioctl.o namei.o super.o symlink.o hash.o resize.o extents.o \
 		ext4_jbd2.o migrate.o mballoc.o block_validity.o move_extent.o \
-		mmp.o indirect.o
+		mmp.o indirect.o cowcopy.o
 
 ext4-$(CONFIG_EXT4_FS_XATTR)		+= xattr.o xattr_user.o xattr_trusted.o
 ext4-$(CONFIG_EXT4_FS_POSIX_ACL)	+= acl.o
diff --git a/fs/ext4/cowcopy.c b/fs/ext4/cowcopy.c
new file mode 100644
index 0000000..3c21cf6
--- /dev/null
+++ b/fs/ext4/cowcopy.c
@@ -0,0 +1,100 @@
+#include <linux/fs.h>
+#include <asm-generic/errno-base.h>
+#include <asm-generic/errno.h>
+#include <linux/syscalls.h>
+#include <linux/stat.h>
+#include <linux/path.h>
+#include <linux/fs_struct.h>
+#include <linux/fdtable.h>
+#include <linux/mount.h>
+#include <linux/slab.h>
+#include <linux/xattr.h>
+#include <linux/namei.h>
+
+extern struct files_struct init_files;
+extern unsigned int full_name_hash(const unsigned char *name, unsigned int len);
+
+#define EXT4_XATTR_INDEX_USER			1
+extern int ext4_xattr_set(struct inode *inode, int name_index, const char *name, const void *value, size_t value_len, int flags);
+extern int ext4_xattr_get(struct inode *inode, int name_index, const char *name, void *buffer, size_t buffer_size);
+
+asmlinkage int sys_ext4_cowcopy(const char __user *src, const char __user *dest)
+{
+	struct path src_path,dest_path;
+	struct dentry *dest_dentry;
+	struct inode *src_inode;
+	int error;
+	int ret;
+	int result;
+	int testvalue = 1;
+	int readtestvalue = 0;
+
+	error = user_path(src, &src_path);
+	
+	// error value indicates whether there is any error while opening the file. 0 --> no error. 
+	if (error == 0)
+	{
+		src_inode = src_path.dentry->d_inode;
+
+		// if src is a directory , return -EPERM
+		if(S_ISDIR(src_inode->i_mode))
+		{
+			return (-EPERM);
+		}
+		
+		// if src is not a regular file return -EPERM
+		if( ! S_ISREG(src_inode->i_mode) )
+		{
+			return (-EPERM);
+		}
+		
+		// if src is not in ext4 file system , return -EOPNOTSUPP
+		if(strcmp(src_inode->i_sb->s_type->name,"ext4") != 0)
+		{
+			return (-EOPNOTSUPP);
+		}
+
+
+		// if the file is open for writing, then return an EPERM
+		printk("file not open for writing, hence can be copied\n");
+
+		// if the  dest exists, then return EEXISTS
+		error = user_path(dest, &dest_path);
+		if (error == 0)
+		{	
+			return (-EEXIST);
+		}
+		
+		// if src and dest are not on same device then return  -EXDEV
+		dest_dentry = user_path_create(-1, dest, &dest_path, 0);
+		if(src_path.mnt != dest_path.mnt)
+		{
+			return (-EXDEV);
+		}
+	
+		// lazy copy - create a hard link
+		result = vfs_link(src_path.dentry,dest_path.dentry->d_inode,dest_dentry);
+		printk("hard link creation status : %d \n", result);
+
+		dput(dest_dentry);
+		mutex_unlock(&dest_path.dentry->d_inode->i_mutex);
+		path_put(&dest_path);
+		path_put(&src_path);
+
+
+		if(result == 0 )
+		{
+			ret = ext4_xattr_set(src_inode, EXT4_XATTR_INDEX_USER, "COW", &testvalue, 4, 0);
+			printk("ext4_xattr_set return value: %d\n", ret);
+		}
+		else
+		{
+			return result;
+		}
+	}
+	else
+	{
+		return -1;
+	}
+	return 0;
+}
\ No newline at end of file
diff --git a/fs/ext4/file.c b/fs/ext4/file.c
index cb70f18..aa8d9fa 100644
--- a/fs/ext4/file.c
+++ b/fs/ext4/file.c
@@ -165,7 +165,37 @@ static int ext4_file_open(struct inode * inode, struct file * filp)
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	struct vfsmount *mnt = filp->f_path.mnt;
 	struct path path;
+	//struct dentry *current_dentry;
 	char buf[64], *cp;
+	int cowcopyflag = 0;
+	int resetflag = 0;
+	int ret,ret_unlink;
+	umode_t mode = 0644;
+
+	// if( inode -> xattr -> value == 1 && (filp -> flag == O_WRONLY or O_RDWR ) then COW copy file
+	ext4_xattr_get(inode, EXT4_XATTR_INDEX_USER, "COW", &cowcopyflag, 4);
+	if(cowcopyflag == 1 && ( ((filp->f_flags & O_RDWR) == 2) || ( (filp->f_flags & O_WRONLY) == 1 ))) 
+	{
+		printk("file trying to be opened is a COWCOPY file\n");
+
+		// unlink from previous inode
+		ret_unlink= vfs_unlink(filp->f_path.dentry->d_parent->d_inode , filp->f_path.dentry);
+		printk("return for vfs_unlink:%d \n",ret_unlink);
+
+		filp->f_path.dentry->d_inode = NULL;
+		list_del_init(&filp->f_path.dentry->d_alias);
+		
+
+		// alloc inode for new file
+		ret = vfs_create(filp->f_path.dentry->d_parent->d_inode , filp->f_path.dentry , mode , NULL );
+		printk("return value for vfs_create: %d \n", ret);
+
+		ext4_xattr_set(inode, EXT4_XATTR_INDEX_USER, "COW", &resetflag, 4, 0);
+		ext4_xattr_set(filp->f_path.dentry->d_inode, EXT4_XATTR_INDEX_USER, "COW", &resetflag, 4, 0);
+	
+		// readpages from src and write to dest ->  and use readpages and write pages  
+
+	}
 
 	if (unlikely(!(sbi->s_mount_flags & EXT4_MF_MNTDIR_SAMPLED) &&
 		     !(sb->s_flags & MS_RDONLY))) {
