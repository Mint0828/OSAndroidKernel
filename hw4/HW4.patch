diff --git a/kernel/sched/mycfs.c b/kernel/sched/mycfs.c
new file mode 100644
index 0000000..84f748a
--- /dev/null
+++ b/kernel/sched/mycfs.c
@@ -0,0 +1,25 @@
+#include <sched.h>
+
+static void dequeue_task_mycfs(struct rq *rq, struct task_struct *prev)
+{
+}
+
+//this will be the big one to implement!!!
+static struct task_struct *pick_next_task_mycfs(struct rq *rq)
+{
+	task_struct *dummy;
+
+	return dummy;
+}
+
+const struct sched_class mycfs_sched_class = {
+	.dequeue_task	= dequeue_task_mycfs;
+	.pick_next_task = pick_next_task_mycfs;
+	//the other hooks will need to be implemented too
+		
+	
+	};
+
+
+
+
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 5370bcb..f0bc48e 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -273,6 +273,12 @@ struct cfs_rq {
 #endif /* CONFIG_FAIR_GROUP_SCHED */
 };
 
+//to be populated with many fields
+struct mycfs_rq 
+{
+
+};
+
 static inline int rt_bandwidth_enabled(void)
 {
 	return sysctl_sched_rt_runtime >= 0;
@@ -465,6 +471,7 @@ struct rq {
 #ifdef CONFIG_SMP
 	struct llist_head wake_list;
 #endif
+	struct mycfs_rq mycfs;
 };
 
 static inline int cpu_of(struct rq *rq)
@@ -856,6 +863,7 @@ enum cpuacct_stat_index {
 extern const struct sched_class stop_sched_class;
 extern const struct sched_class rt_sched_class;
 extern const struct sched_class fair_sched_class;
+extern const struct sched_class mycfs_sched_class;
 extern const struct sched_class idle_sched_class;
 
 
